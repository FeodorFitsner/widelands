#!/usr/bin/env python -tt
# encoding: utf-8
#

"""
Checking for forbidden
TypeName* and TypeName& which should have a space before
"""

# We're no longer passed any comments, therefore
# checking for them is not really needed

error_msg="Missing padding for operator (+-*/=%^&). Needs a space before and after."

regexp = r"""(?x)
(
    ([^\s&/*(\>]\*(?!/))|   # Extra care for end of comment
    ([^\s*&(\>][&+\-*/^%=])| # All other operators and with space before
    ([+\-/^%=][^\s&+\-*/^%=*])  # Check for space before
)
"""

allowed = [
    "RoutingNode * a;",
    "Blahtype & b;",
    "/** Some comment",
    "std::vector<RoutingNode *> & nodes",
    "if (a && b)",
	"\tOpen.push(&start);"
    "\t\t*reinterpret_cast<std::vector<RoutingNode *>*>(&m_flags);",
    "std::vector<RoutingNode *>& nodes",
	"/* warehouses can determine max idle priority*/",
	"blah // I *wanna* do that",
    "&*m_stack.rbegin()",
]
forbidden = [
    "RoutingNode* a;",
    "Blahtype& b;",
    "std::vector<RoutingNode*> & nodes",
    
    'char a = a^ a;',
    'char a = a ^a;',

    # Erics tests
    ## missing_padding.cc
    'char a=a;',
    'char a= a^a;',
    'char a= a%a;',
    'char a= a/a;',
    'char a= a*a;',
    'char a= a+a;',
    'char a= a-a;',
    'char A=A;',
    'char A= A^A;',
    'char A= A%A;',
    'char A= A/A;',
    'char A= A*A;',
    'char A= A+A;',
    'char A= A-A;',
    
    'char b=b;',
    'char b= b^b;',
    'char b= b%b;',
    'char b= b/b;',
    'char b= b*b;',
    'char b= b+b;',
    'char b= b-b;',
    'char B=B;',
    'char B= B^B;',
    'char B= B%B;',
    'char B= B/B;',
    'char B= B*B;',
    'char B= B+B;',
    'char B= B-B;',
    
    'char _=_;',
    'char _= _^_;',
    'char _= _%_;',
    'char _= _/_;',
    'char _= _*_;',
    'char _= _+_;',
    'char _= _-_;',

    'char x0=010;',
    'char x0= 010^010;',
    'char x0= 010%010;',
    'char x0= 010/010;',
    'char x0= 010*010;',
    'char x0= 010+010;',
    'char x0= 010-010;',
    
    'char x1=1;',
    'char x1= 1^1;',
    'char x1= 1%1;',
    'char x1= 1/1;',
    'char x1= 1*1;',
    'char x1= 1+1;',
    'char x1= 1-1;',

    'char const * str ="";',

    'char ch =' ';',

    'a^= a;',
    'a ^=a;',
    'a^=a;',
    'a/g= a;',
    'a /g=a;',
    'a/g=a;',
    'a*= a;',
    'a *=a;',
    'a*=a;',
    'a-= a;',
    'a -=a;',
    'a-=a;',
    'a+= a;',
    'a +=a;',
    'a+=a;',
    
    'A^= A;',
    'A ^=A;',
    'A^=A;',
    'A/g= A;',
    'A /g=A;',
    'A/g=A;',
    'A*= A;',
    'A *=A;',
    'A*=A;',
    'A-= A;',
    'A -=A;',
    'A-=A;',
    'A+= A;',
    'A +=A;',
    'A+=A;',
    
    '_^= _;',
    '_ ^=_;',
    '_^=_;',
    '_/g= _;',
    '_ /g=_;',
    '_/g=_;',
    '_*= _;',
    '_ *=_;',
    '_*=_;',
    '_-= _;',
    '_ -=_;',
    '_-=_;',
    '_+= _;',
    '_ +=_;',
    '_+=_;',
    
    'type_a& aa = aa;',
    'type_A& AA = AA;',
    'type_b& bb = bb;',
    'type_B& BB = BB;',
    'type_c& cc = cc;',
    'type_C& CC = AA;',
    'type_d& dd = dd;',
    'type_D& DD = DD;',
    'type_e& ee = ee;',
    'type_E& EE = EE;',
    'type_f& ff = ff;',
    'type_F& FF = FF;',
    'type_g& gg = gg;',
    'type_G& GG = GG;',
    'type_h& hh = hh;',
    'type_H& HH = HH;',
    'type_i& ii = ii;',
    'type_I& II = II;',
    'type_j& jj = jj;',
    'type_J& JJ = JJ;',
    'type_k& kk = kk;',
    'type_K& KK = KK;',
    'type_l& ll = ll;',
    'type_L& LL = LL;',
    'type_m& mm = mm;',
    'type_M& MM = MM;',
    'type_n& nn = nn;',
    'type_N& NN = NN;',
    'type_o& oo = oo;',
    'type_O& OO = OO;',
    'type_p& pp = pp;',
    'type_P& PP = PP;',
    'type_q& qq = qq;',
    'type_Q& QQ = QQ;',
    'type_r& rr = rr;',
    'type_R& RR = RR;',
    'type_s& ss = ss;',
    'type_S& SS = SS;',
    'type_t& tt = tt;',
    'type_T& TT = TT;',
    'type_u& uu = uu;',
    'type_U& UU = UU;',
    'type_v& vv = vv;',
    'type_V& VV = VV;',
    'type_w& ww = ww;',
    'type_W& WW = WW;',
    'type_x& xx = xx;',
    'type_X& XX = XX;',
    'type_y& yy = yy;',
    'type_Y& YY = YY;',
    'type_z& zz = zz;',
    'type_Z& ZZ = ZZ;',
    'type_a* aaa;',
    'type_b* bbb;',
    'type_c* ccc;',
    'type_d* ddd;',
    'type_e* eee;',
    'type_f* fff;',
    'type_g* ggg;',
    'type_h* hhh;',
    'type_i* iii;',
    'type_j* jjj;',
    'type_k* kkk;',
    'type_l* lll;',
    'type_m* mmm;',
    'type_n* nnn;',
    'type_o* ooo;',
    'type_p* ppp;',
    'type_q* qqq;',
    'type_r* rrr;',
    'type_s* sss;',
    'type_t* ttt;',
    'type_u* uuu;',
    'type_v* vvv;',
    'type_w* www;',
    'type_x* xxx;',
    'type_y* yyy;',
    'type_z* zzz;',
    'type_A* AAA;',
    'type_B* BBB;',
    'type_C* CCC;',
    'type_D* DDD;',
    'type_E* EEE;',
    'type_F* FFF;',
    'type_G* GGG;',
    'type_H* HHH;',
    'type_I* III;',
    'type_J* JJJ;',
    'type_K* KKK;',
    'type_L* LLL;',
    'type_M* MMM;',
    'type_N* NNN;',
    'type_O* OOO;',
    'type_P* PPP;',
    'type_Q* QQQ;',
    'type_R* RRR;',
    'type_S* SSS;',
    'type_T* TTT;',
    'type_U* UUU;',
    'type_V* VVV;',
    'type_W* WWW;',
    'type_X* XXX;',
    'type_Y* YYY;',
    'type_Z* ZZZ;',
]


