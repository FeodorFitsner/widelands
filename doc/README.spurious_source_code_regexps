This file documents the regular expressions used by
utils/detect_spurious_source_code.sh (and stored in the file
utils/spurious_source_code_regexps).

Note that some regex characters (e.g. tabs) might not be correctly represented
in this README.

The regexes:


[     ]$

This catches trailing whitespace (a tab or space followed by the end of
the line). The tab got converted to spaces when I pasted it into the
e-mail, but it is a tab and a space inside [] in the actual file.


[^    ]+[    ]

This catches a non-tab followed by a tab. Tabs are only allowed as the
first character on a line or immediately following another tab. This is
to make sure that tabs are not used for anything else than indentation.


 [,})]

This catches a space before a comma or closing brace or parenthesis.


^("([^"]|\\")*\"|'(\\[\'nt]|[^\'])'|[^"'])*,[^ ]

This catches a comma that is followed by another character than a space,
for example "a,b,c", which should be "a, b, c". It is a little complex
because it should not catch commas in string constants or character
constants.


[^     @]\{

This catches an opening brace that comes after a character that is not
tab or space. It detects code like "if (condition){", which should be
"if (condition) {" the @ is there because @{ seem to be used in doxygen
comments.


\{ +[^ /\\]

This catches an opening brace followed by a space, but it allows it if a
comment begins there, such as "{ //  comment".


\}[^ ,;}\]

This catches a closing brace followed by a character that is not withing
the [^] list. it catches code like "struct {T x}a;", which should be
"struct {T x} a;".


\([ ]

This catches an opening parenthesis followed by a space (the space is
inside [] to prevent the editor from removing it when saving the file).


(catch|for|if|switch|while)\(

This catches code like "for(", which should be "for (".


[^_a-zA-Z0-9"](TRUE|FALSE)[^_a-zA-Z0-9"]

This catches use of the infamous TRUE and FALSE macros that are
sometimes sighted, while allowing identifiers like THE_TRUE_STORY.


\( *(const)* *void *\)

This catches some functions that are declared to have no parameters with
the syntax "some_function(void)".


(for|if|while) \((/[^/*]|[^/])*\) (/[^/*]|[^/])*[^){};\\]$

This was added to find some of the stuff that annoys Nicolai, such as:
   if (a) throw wexception
      ("Message explaining what went wrong, using format "
       "argument such as %u, %ill and %s",
       7, -9380350846789, "hej");

He requires it to be formatted like this instead:
   if (a)
      throw wexception
         ...

So a line with "for (a)", "if (a)" or "while (a)" must end with one of
the characters in the string "){};\". Although a comment at the end is
allowed (therefore the complex regexp).


_cast<const( +[_a-zA-Z][_a-zA-Z0-9]*)* *>
_cast<( *[_a-zA-Z][_a-zA-Z0-9]*)* *\* *const *>

These were added to find stuff that makes the code "even more annying to
read" for Nicolai. It detects uses of the const keyword inside casts,
that have no effect, such as "static_cast<const uint32_t>" or
"dynamic_cast<T * const>". The first version catches some allowed usage,
such as "static_cast<const DATATYPE>", where DATATYPE is a macro that
expands to something like "T *".


\( *(void|float|double|u?(char|short|int)|[US]int(8|16|32)) *\) *[^ :;{)=]

This catches some old-style casts, that should be caught with
-Wold-style-cast, and when gcc-4.2 is common, -Werror=old-style-cast.

snprintf *\( *[_a-zA-Z][_a-zA-Z0-9]* *, *[[:digit:]]+

This catches code like:
char buffer[25];
snprintf(buffer, 25, "format string");

It should of course be:
snprintf(buffer, sizeof(buffer), "format string");


^DISABLED_STILL_TOO_MANY_ERRORS    * +.*{$

This is supposed to catch lines starting with a space and ending with an
opening brace. It implies wrong indentation (the indentation of lines
ending with { is especially important since editors indent following
lines the same way). This rule is what caused the recent flood of
commits. I added the DISABLED_STILL_TOO_MANY_ERRORS to prevent it from
matching anything, because there are still too many of them left.


assert *\( *0 *\)

This is simply to encourage the use "assert(false)" everywhere when an
unconditional assert is desired, for consistency, instead of intermixing
it with assert(0) here and there.


[^_a-zA-Z0-9]this->[^*]

This is another thing that should be caught before reaching Nicolai's
eyes. The explicit use of "this->" is not allowed. But it should not
catch things like "do_this->now". It should also not catch things like
"(this->*(action->function))(g, state, action)", which seem to be needed
in some places.
