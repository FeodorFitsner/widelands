<?xml version="1.0" encoding="us-ascii"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head><title>Widelands Productionsite Program Reference</title></head>
<body>
<h1>Widelands Productionsite Program Reference</h1>
<p>
Productionsites can have programs that will be executed by the game engine. Each productionsite must have a program named <i>work</i>, which will be started automatically when the productionsite is created in the game, and then repeated until the productionsite is destroyed. Each program must be declared with program=<i>&lt;name&gt;</i> in the [<i>global</i>] section of the productionsite's definition. A program can call another program, which must have been declared earlier. A program is defined in the section that has the same name as the program (the order of program definitions does not matter). A program consists of a sequence of commands. A command is written as <i>&lt;type&gt;=&lt;parameters&gt;</i>. The different command types and the parameters that they take are explained below.
</p>
<h2 id="command_types">command types</h2>
<ul>
<li><a href="#return">return</a></li>
<li><a href="#call">call</a></li>
<li><a href="#worker">worker</a></li>
<li><a href="#sleep">sleep</a></li>
<li><a href="#animate">animate</a></li>
<li><a href="#consume">consume</a></li>
<li><a href="#produce">produce</a></li>
<li><a href="#mine">mine</a></li>
<li><a href="#check_soldier">check_soldier</a></li>
<li><a href="#train">train</a></li>
<li><a href="#playFX">playFX</a></li>
</ul>
<h3 id="return">return</h3>
<p>Returns from the program.</p>
<p>Parameter syntax:</p>
<pre>  parameters        &nbsp;::= return_value [condition_part]
  return_value      &nbsp;::= Failed | Completed | Skipped
  Failed            &nbsp;::= <b>failed</b>
  Completed         &nbsp;::= <b>completed</b>
  Skipped           &nbsp;::= <b>skipped</b>
  condition_part    &nbsp;::= when_condition | unless_condition
  when_condition    &nbsp;::= <b>when</b> condition {<b>and</b> condition}
  unless_condition  &nbsp;::= <b>unless</b> condition {<b>or</b> condition}
  condition         &nbsp;::= negation | economy_condition | workers_condition
  negation          &nbsp;::= <b>not</b> condition
  economy_condition &nbsp;::= <b>economy</b> economy_needs
  workers_condition &nbsp;::= <b>workers</b> need_experience
  economy_needs     &nbsp;::= <b>needs</b> <i>ware_type</i>
  need_experience   &nbsp;::= <b>need experience</b></pre>
<p>Parameter semantics:</p>
<pre>  return_value:
     If return_value is Failed or Completed, the productionsite's
     statistics is updated accordingly. If return_value is Skipped, the
     statistics are not affected.
  condition:
     A boolean condition that can be evaluated to true or false.
  condition_part:
     If omitted, the return is unconditional.
  when_condition:
     This will cause the program to return when all conditions are true.
  unless_condition:
     This will cause the program to return unless some condition is true.
  <i>ware_type</i>:
     The name of a ware type (defined in the tribe). A ware type may only
     appear once in the command.
  economy_needs:
     The result of this condition depends on whether the economy that this
     productionsite belongs to needs a ware of the specified type. How
     this is determined is defined by the economy.</pre>
<p>
Aborts the execution of the program and sets a return value. Updates the productionsite's statistics depending on the return value.
</p>
<p>
Note: If the execution reaches the end of the program. the return value is implicitly set to Completed.
</p>
<h3 id="call">call</h3>
<p>Calls a program of the productionsite.</p>
<p>Parameter syntax:</p>
<pre>  parameters                &nbsp;::= program [failure_handling_directive]
  failure_handling_directive&nbsp;::= <b>on failure</b> failure_handling_method
  failure_handling_method   &nbsp;::= Fail | Repeat | Ignore
  Fail                      &nbsp;::= <b>fail</b>
  Repeat                    &nbsp;::= <b>repeat</b>
  Ignore                    &nbsp;::= <b>ignore</b></pre>
<p>Parameter semantics:</p>
<pre>  program:
     The name of a program defined in the productionsite.
  failure_handling_method:
     Specifies how to handle a failure of the called program.
     * If failure_handling_method is Fail, the command fails (with the
       same effect as executing <b>return</b>=<b>failed</b>).
     * If failure_handling_method is <b>repeat</b>, the command is repeated.
     * If failure_handling_method is <b>ignore</b>, the failure is ignored
       (the program is continued).
  failure_handling_directive:
     If omitted, the value Ignore is used for failure_handling_method.</pre>
<h3 id="worker">worker</h3>
<p>Calls a program of the productionsite's main worker.</p>
<p>Parameter syntax:</p>
<pre>  parameters&nbsp;::= <i>program</i></pre>
<p>Parameter semantics:
</p>
<pre>  <i>program</i>:
     The name of a program defined in the productionsite's main worker.</pre>
<h3 id="sleep">sleep</h3>
<p>Does nothing.</p>
<p>Parameter syntax:</p>
<pre>  parameters&nbsp;::= <i>duration</i></pre>
<p>Parameter semantics:</p>
<pre>  <i>duration</i>:
     A natural integer. If 0, the result from the most recent command that
     returned a value is used.</pre>
<p>
Blocks the execution of the program for the specified duration.
</p>
<h3 id="animate"> animate </h3>
<p>Runs an animation.
</p><p>Parameter syntax:
</p>
<pre>  parameters&nbsp;::= <i>animation</i> <i>duration</i></pre>
<p>Parameter semantics:
</p>
<pre>  <i>animation</i>:
     The name of an animation (defined in the productionsite).
  <i>duration</i>:
     A natural integer. If 0, the result from the most recent command that
     returned a value is used.</pre>
<p>
Starts the specified animation for the productionsite. Blocks the execution of the program for the specified duration. (The duration does not have to equal the length of the animation. It will loop around. The animation will not be stopped by this command. It will run until another animation is started.)
</p>
<h3 id="consume">consume</h3>
<p>Consumes wares from the input storages.</p>
<p>Parameter syntax:</p>
<pre>  parameters&nbsp;::= group {group}
  group     &nbsp;::= <i>ware_type</i>{<b>,</b>ware_type}[<b>:</b><i>count</i>]</pre>
<p>Parameter semantics:</p>
<pre>  <i>ware_type</i>:
     The name of a ware type (defined in the tribe).
  <i>count</i>:
     A positive integer. If omitted, the value 1 is used.</pre>
<p>
For each group, the number of wares specified in count is consumed. The consumed wares may be of any type in the group.
</p>
<p>
If there are not enough wares in the input storages, the command fails (with the same effect as executing <b>return</b>=<b>failed</b>). Then no wares will be consumed.
</p>
<p>
Selecting which ware types to consume for a group so that the whole command succeeds is a constraint satisfaction problem. The implementation does not implement an exhaustive search for a solution to it. It is just a greedy algorithm which gives up instead of backtracking. Therefore the command may fail even if there is a solution.
</p>
<p>
However it may be possible to help the algorithm by ordering the groups carefully. Suppose that the input storage has the wares <i>a</i>:1, <i>b</i>:1 and a consume command has the parameters <i>a</i><b>,</b><i>b</i><b>:</b>1 <i>a</i><b>:</b>1. The algorithm tries to consume its input wares in order. It starts with the first group and consumes 1 ware of type <i>a</i> (the group becomes satisfied). Then it proceeds with the second group, but there are no wares of type <i>a</i> left to consume. Since there is no other ware type that can satisfy the group, the command will fail. If the groups are reordered so that the parameters become <i>a</i><b>:</b>1 <i>a</i><b>,</b><i>b</i><b>:</b>1, it will work. The algorithm will consume 1 ware of type <i>a</i> for the first group. When it proceeds with the second group, it will not have any wares of type <i>a</i> left. Then it will go on and consume 1 ware of type <i>b</i> for the second group (which becomes satisfied) and the command succeeds.
</p>
<p>
<b>Note:</b> It is not possible to reorder ware types within a group. <i>a</i><b>,</b><i>b</i>" is equivalent to <i>b<b>,</b>a</i> because in the internal representation the ware types of a group are sorted.
</p>
<h3 id="produce">produce</h3>
<p>Produces wares.</p>
<p>Parameter syntax:</p>
<pre>  parameters&nbsp;::= group {group}
  group     &nbsp;::= <i>ware_type</i>[<b>:</b><i>count</i>]</pre>
<p>Parameter semantics:</p>
<pre>  <i>ware_type</i>:
     The name of a ware type (defined in the tribe). A ware type may only
     appear once in the command.
  <i>count</i>:
     A positive integer. If omitted, the value 1 is used.</pre>
<p>
For each group, the number of wares specified in count is produced. The produced wares are of the type specified in the group. How the produced wares are handled is defined by the productionsite.
</p>
<h3 id="mine">mine</h3>
<p>Takes resources from the ground. This command type is subject to change.</p>
<h3 id="check_soldier">check_soldier</h3>
<p>
Returns failure unless there are a specified amout of soldiers with specified level of specified properties. This command type is subject to change.
</p>
<h3 id="train">train</h3>
<p>
Increases the level of a specified property of a soldier. No further documentation available.
</p>
<h3 id="playFX">playFX</h3>
<p>Plays a soundFX.</p>
<p>Parameter syntax:</p>
<pre>  parameters&nbsp;::= <i>soundFX</i> [<i>priority</i>]</pre>
<p>Parameter semantics:</p>
<pre>  <i>soundFX</i>:
     The filename of an soundFX (relative to the productionsite's
     directory).
  <i>priority</i>:
     An integer. If omitted, 127 is used.</pre>
<p>
Plays the specified soundFX with the specified priority. Whether the soundFX is actually played is determined by the sound handler.
</p>
</body>
</html>
